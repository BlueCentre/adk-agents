# https://google.github.io/adk-docs/agents/models/#using-ollama_chat-provider
# This uses ollama_chat provider like model="ollama_chat/llama3.2"
# OPENAI_API_BASE=http://localhost:11434

# If using openai provider then
# OPENAI_API_BASE=http://localhost:11434/v1
# OPENAI_API_KEY=anything

# https://google.github.io/adk-docs/agents/models/#using-cloud-proprietary-models-via-litellm
# If you want Anthropic like model="anthropic/claude-3-haiku-20240307"
# ANTHROPIC_API_KEY="YOUR_ANTHROPIC_API_KEY"
# Or OpenAI like model="openai/gpt-4o"
# OPENAI_API_KEY="YOUR_OPENAI_API_KEY"
# Or Gemini like model="gemini-2.5-flash-preview-04-17"
GOOGLE_GENAI_USE_VERTEXAI=FALSE
GOOGLE_API_KEY=YOUR_AI_STUDIO_KEY

# https://ai.google.dev/gemini-api/docs/models
GEMINI_FLASH_MODEL=gemini-2.5-flash-preview-05-20 # https://ai.google.dev/gemini-api/docs/models#gemini-2.5-flash-preview
GEMINI_PRO_MODEL=gemini-2.5-pro-preview-05-06 # https://ai.google.dev/gemini-api/docs/models#gemini-2.5-pro-preview-05-06

# ADK: root & sub-agents
# AGENT_MODEL=gemini-2.5-pro-preview-05-06 # https://ai.google.dev/gemini-api/docs/models#gemini-2.5-pro-preview-05-06
# SUB_AGENT_MODEL=gemini-2.5-flash-preview-05-20 # https://ai.google.dev/gemini-api/docs/models#gemini-2.5-flash-preview

# ADK: built-in tools
# CODE_EXECUTION_MODEL=gemini-1.5-flash # https://ai.google.dev/gemini-api/docs/models#gemini-1.5-flash
# GOOGLE_SEARCH_MODEL=gemini-1.5-flash # https://ai.google.dev/gemini-api/docs/models#gemini-1.5-flash

# FUNCTION: file summarizer tool
# SUMMARIZER_MODEL=gemini-1.5-flash # https://ai.google.dev/gemini-api/docs/models#gemini-1.5-flash

# GEMINI FEATURE: https://ai.google.dev/gemini-api/docs/thinking
GEMINI_THINKING_ENABLE=true
GEMINI_THINKING_ENABLE=true
GEMINI_THINKING_INCLUDE_THOUGHTS=true
GEMINI_THINKING_BUDGET=8192 # https://ai.google.dev/gemini-api/docs/thinking#set-budget

# FEATURE FLAGS
ENABLE_INTERACTIVE_PLANNING=true
ENABLE_CODE_EXECUTION=false # Currently only supports Gemini 2.0+ models.

# MCP: Filesystem MCP Agent
MCP_ALLOWED_DIRECTORIES=/some/directory/path,/another/path

# MCP (optional): Atlassian MCP
# CONFLUENCE_URL=https://<company>.atlassian.net/wiki
# CONFLUENCE_USERNAME=<your.email@company.com>
# CONFLUENCE_TOKEN=YOUR_ATLASSIAN_TOKEN
# JIRA_URL=https://<company>.atlassian.net
# JIRA_USERNAME=<your.email@company.com>
# JIRA_TOKEN=YOUR_ATLASSIAN_TOKEN

# MCP (optional): Datadog 
# DATADOG_API_KEY="YOUR_DATADOG_API_KEY"
# DATADOG_APP_KEY="YOUR_DATADOG_APP_KEY"
# DATADOG_SITE="https://us5.datadoghq.com/" # (optional)

# ChromaDB Indexing
# Multiple Location Fallbacks: The code now tries multiple potential locations for the ChromaDB data in order of preference:
# 1. Environment variable (highest priority)
# 2. Current working directory + .index_data subfolder
# 3. Home directory + .adk/devops_agent subfolder
# 4. Original path from __file__ (kept for backward compatibility)
# 5. System temp directory (final fallback)
CHROMA_DATA_PATH=.cache/devops_agent

# SHELL (optional): Bitwarden (bw login)
# BW_SESSION="YOUR_BITWARDEN_SESSION"
