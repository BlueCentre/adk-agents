name: Pull Request Workflow

on:
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for PR comments and linting tools that require full history

      - name: Install UV and setup Python ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run linting
        run: uv run ruff check . --output-format=github

  call-test-coverage:
    name: Run Tests and Coverage
    uses: ./.github/workflows/reusable-python-test-coverage.yml
    with:
      python-version: "3.11"
      checkout-fetch-depth: 0 # Needed for PR comments
      run-api-tests: true # Assuming PR tests should run API tests
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

  pr-comment-and-notify:
    name: PR Comment and Notifications
    runs-on: ubuntu-latest
    needs: [lint, call-test-coverage]
    if: always() # Run even if previous jobs fail

    steps:
      - name: Checkout code (for script and PR comment)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for PR comments

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: test-and-coverage-reports
          path: . # Download to current directory

      - name: Install Python (for coverage script)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Generate Coverage Report Markdown
        run: python scripts/ci/generate_coverage_markdown.py coverage.xml coverage_report.md

      - name: Find Comment
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: Test Coverage Report

      - name: Create or update PR comment with coverage
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-file: coverage_report.md
          edit-mode: replace

      - name: Consolidate Slack Notification (Final Status)
        if: ${{ github.event.pull_request.head.sha == github.sha && secrets.SLACK_WEBHOOK_URL != '' }} # Only notify for the last commit on the PR
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            {
              "text": "PR Workflow Status: ${{ job.status }} for PR #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}\nDetails: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "attachments": [
                {
                  "color": "${{ needs.pr-comment-and-notify.result == 'success' && 'good' || 'danger' }}",
                  "fields": [
                    {
                      "title": "Linting",
                      "value": "${{ needs.lint.result == 'success' && '✅ Success' || '❌ Failed' }}",
                      "short": true
                    },
                    {
                      "title": "Tests & Coverage",
                      "value": "${{ needs.call-test-coverage.result == 'success' && '✅ Success' || '❌ Failed' }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
