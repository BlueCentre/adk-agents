[project]
# Project metadata. Available keys are documented at:
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata

name = "adk-agent"
description = "DevOps & Software Engineer Agents with ADK compatibility."
readme = "README.md"
requires-python = ">=3.9"
#license = { file = "LICENSE" }
authors = [{ name = "BlueCentre", email = "git@nocentre.net" }]
classifiers = [
  "Typing :: Typed",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  #"License :: OSI Approved :: Apache Software License",
]
dependencies = [
  "chromadb>=1.0.12", # Using newer version that might be compatible
  # "fastapi>=0.115.13", # For web UI functionality
  # "google-genai~=1.19.0", # Migrated from google-generativeai
  # "google-api-core>=2.19.0", # Updated for protobuf 5.x compatibility
  # "protobuf>=5.0,<6.0", # Updated for OpenTelemetry compatibility
  "litellm>=1.71.2", # For LiteLLM support (required by software_engineer agent)
  "openai>=1.10.0", # Using latest stable version
  "openlit>=1.33.20", # Using latest stable version
  "opentelemetry-api>=1.30.0,<2.0.0", # OpenTelemetry core - compatible with openlit
  "opentelemetry-sdk>=1.30.0,<2.0.0", # OpenTelemetry SDK - compatible with openlit
  "opentelemetry-exporter-otlp>=1.30.0,<2.0.0", # OTLP exporter for Grafana Cloud
  "psutil~=5.9.0", # System monitoring
  "rich>=13.7.0,<14.0.0", # Console output (for local dashboard if needed) - updated for crewai compatibility
  # "ollama>=0.5.1",
  "prompt_toolkit~=3.0.0", # For enhanced command-line input
  "textual~=4.0.0", # For enhanced TUI
  "pexpect>=4.9.0",
  # "google-adk @ git+https://github.com/google/adk-python.git@main", # Added google-adk as a direct dependency
  "google-adk @ git+https://github.com/BlueCentre/adk-python.git@feat/rich-click", # Added google-adk as a direct dependency
  "watchdog>=6.0.0", # For file change detection and hot reload
  "pytest>=8.4.0",
  "pytest-asyncio>=1.0.0",
]
dynamic = ["version"]

[project.urls]
homepage = "https://adk-agents.vitruviansoftware.dev/"
repository = "https://github.com/BlueCentre/adk-agents"
changelog = "https://github.com/BlueCentre/adk-agents/blob/main/CHANGELOG.md"
documentation = "https://adk-agents.vitruviansoftware.dev/"

[project.scripts]
agent = "wrapper.adk.cli:main"
adk-agent = "google.adk.cli:main"

[project.optional-dependencies]

dev = [
  # go/keep-sorted start
  "flit>=3.10.0",
  "mypy>=1.15.0",
  "ruff>=0.8.0",
  # go/keep-sorted end
]

a2a = [
  # go/keep-sorted start
  # Temporarily disabled due to FastAPI version conflict with chromadb
  # "a2a-sdk>=0.2.7;python_version>='3.10'"
  # go/keep-sorted end
]

eval = [
  # go/keep-sorted start
  "google-cloud-aiplatform[evaluation]>=1.87.0",
  "pandas>=2.2.3",
  "tabulate>=0.9.0",
  # go/keep-sorted end
]

test = [
  # go/keep-sorted start
  "anthropic>=0.43.0",               # For anthropic model tests
  "freezegun>=1.5.0",                # For mocking datetime in tests
  "langchain-community>=0.3.17",
  "langgraph>=0.2.60",               # For LangGraphAgent
  "litellm>=1.71.2",                 # For LiteLLM tests
  "llama-index-readers-file>=0.4.0", # For retrieval tests

  "pytest-asyncio>=0.25.0",
  "pytest-mock>=3.14.0",
  "pytest-xdist>=3.6.1",
  "pytest>=8.3.4",
  # go/keep-sorted end
]

docs = [
  "autodoc_pydantic",
  "furo",
  "myst-parser",
  "sphinx",
  "sphinx-autodoc-typehints",
  "sphinx-rtd-theme",
]

# Optional extensions
extensions = [
  "anthropic>=0.43.0",     # For anthropic model support
  "beautifulsoup4>=3.2.2", # For load_web_page tool.
  # "crewai[tools];python_version>='3.10'", # Temporarily disabled due to dependency conflicts
  "docker>=7.0.0",                   # For ContainerCodeExecutor
  "langgraph>=0.2.60",               # For LangGraphAgent
  "litellm>=1.71.2",                 # For LiteLLM support
  "llama-index-readers-file>=0.4.0", # For retrieval using LlamaIndex.
  "lxml>=5.3.0",                     # For load_web_page tool.
  "tiktoken>=0.7.0,<0.8.0",          # Using latest stable version
  "toolbox-core>=0.1.0",             # For tools.toolbox_toolset.ToolboxToolset
]


[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src", "."]
include = ["wrapper*", "agents*"]
#exclude = ["example_prompts*", "scripts*", ".cache*", ".agent*"]

[tool.setuptools.package-data]
"wrapper.adk.cli.utils" = ["*.tcss"]
"wrapper.adk.cli" = ["browser/*", "browser/**/*"]
"agents" = ["**/*"]


[tool.pyink]
# Format py files following Google style-guide
line-length = 100
unstable = true
pyink-indentation = 2
pyink-use-majority-quotes = true
pyink-annotation-pragmas = [
  "noqa",
  "pylint:",
  "type: ignore",
  "pytype:",
  "mypy:",
  "pyright:",
  "pyre-",
]

[tool.isort]
profile = "google"
single_line_exclusions = []
line_length = 100                  # Prevent line wrap flickering.
known_third_party = ["google.adk"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"

[tool.mypy]
python_version = "3.9"
exclude = "tests/"
plugins = ["pydantic.mypy"]
# Start with non-strict mode, and swtich to strict mode later.
# strict = true
disable_error_code = ["import-not-found", "import-untyped", "unused-ignore"]
follow_imports = "skip"


[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "flake8>=7.3.0",
    "pylint>=3.3.7",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "radon>=6.0.1",
]

[tool.coverage.run]
# Only include source code from the src/ directory
source = ["src"]

# Exclude files that shouldn't be included in coverage
omit = [
  "*/tests/*",
  "*/test_*",
  "*/__pycache__/*",
  "*/venv/*",
  "*/.venv/*",
  "*/build/*",
  "*/dist/*",
  "tests/*",
  "setup.py",
  "conftest.py",
]

[tool.coverage.report]
# Minimum coverage percentage required
fail_under = 80

# Show missing lines in the report
show_missing = true

# Skip covered files in the report
skip_covered = false

# Skip empty files
skip_empty = true

# Exclude lines with these patterns from coverage
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
# Directory for HTML coverage reports
directory = "htmlcov"

[tool.coverage.xml]
# XML coverage report filename
output = "coverage.xml"

# Ruff configuration - Google style
[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
# Enable Google-style rules
select = [
  # pycodestyle
  "E",  # Error
  "W",  # Warning
  # Pyflakes
  "F",  # pyflakes
  # pyupgrade
  "UP", # pyupgrade
  # flake8-bugbear
  "B",  # flake8-bugbear
  # flake8-simplify
  # "SIM", # flake8-simplify (temporarily disabled)
  # isort
  "I",  # isort
  # flake8-comprehensions
  "C4", # flake8-comprehensions
  # flake8-implicit-str-concat
  "ISC", # flake8-implicit-str-concat
  # flake8-pie
  "PIE", # flake8-pie
  # flake8-return
  "RET", # flake8-return
  # flake8-unused-arguments
  "ARG", # flake8-unused-arguments
  # flake8-use-pathlib
  "PTH", # flake8-use-pathlib
  # pandas-vet
  "PD", # pandas-vet
  # pygrep-hooks
  "PGH", # pygrep-hooks
  # Ruff-specific rules
  "RUF", # Ruff-specific rules
]

ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Allow print statements (common in CLI tools)
  "T201",
  # Allow relative imports
  "TID252",
]

unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = ["wrapper", "agents"]
known-third-party = ["google", "google.adk"]
section-order = [
  "future",
  "standard-library", 
  "third-party",
  "first-party",
  "local-folder"
]
# Use Google style for imports
force-single-line = false
force-sort-within-sections = true
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# Scripts can use print statements and subprocess calls
"scripts/**/*" = ["T201", "S603", "S607"]
# Allow certain patterns in __init__.py files
"**/__init__.py" = ["F401"]

[tool.ruff.format]
# Use Google style formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
